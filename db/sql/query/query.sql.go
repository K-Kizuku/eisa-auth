// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package query

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  user_id, mail, name, hashed_password
) VALUES (
  $1, $2, $3, $4
)
RETURNING user_id, mail, name, hashed_password
`

type CreateUserParams struct {
	UserID         string
	Mail           string
	Name           string
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.UserID,
		arg.Mail,
		arg.Name,
		arg.HashedPassword,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Mail,
		&i.Name,
		&i.HashedPassword,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, mail, name, hashed_password FROM users
WHERE mail = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, mail string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, mail)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Mail,
		&i.Name,
		&i.HashedPassword,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT user_id, mail, name, hashed_password FROM users
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, userID string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Mail,
		&i.Name,
		&i.HashedPassword,
	)
	return i, err
}

const getUserByIDWithEisaFiles = `-- name: GetUserByIDWithEisaFiles :one
SELECT u.user_id, u.mail, u.name, u.hashed_password, ef.file_path
FROM users u
INNER JOIN eisa_files ef USING (user_id)
WHERE u.user_id = $1
`

type GetUserByIDWithEisaFilesRow struct {
	UserID         string
	Mail           string
	Name           string
	HashedPassword string
	FilePath       string
}

func (q *Queries) GetUserByIDWithEisaFiles(ctx context.Context, userID string) (GetUserByIDWithEisaFilesRow, error) {
	row := q.db.QueryRow(ctx, getUserByIDWithEisaFiles, userID)
	var i GetUserByIDWithEisaFilesRow
	err := row.Scan(
		&i.UserID,
		&i.Mail,
		&i.Name,
		&i.HashedPassword,
		&i.FilePath,
	)
	return i, err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE users
  set hashed_password = $2
WHERE user_id = $1
`

type UpdatePasswordParams struct {
	UserID         string
	HashedPassword string
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.Exec(ctx, updatePassword, arg.UserID, arg.HashedPassword)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
  set mail = $2,
  name = $3,
  hashed_password = $4
WHERE user_id = $1
`

type UpdateUserParams struct {
	UserID         string
	Mail           string
	Name           string
	HashedPassword string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.UserID,
		arg.Mail,
		arg.Name,
		arg.HashedPassword,
	)
	return err
}

const upsertEisaFile = `-- name: UpsertEisaFile :exec
WITH updated AS (
  UPDATE eisa_files
  SET deleted_at = CURRENT_TIMESTAMP
  WHERE user_id = $1
  RETURNING user_id, file_path, created_at, deleted_at
)
INSERT INTO eisa_files (user_id, file_path)
VALUES ($1, $2)
`

type UpsertEisaFileParams struct {
	UserID   string
	FilePath string
}

func (q *Queries) UpsertEisaFile(ctx context.Context, arg UpsertEisaFileParams) error {
	_, err := q.db.Exec(ctx, upsertEisaFile, arg.UserID, arg.FilePath)
	return err
}
